{"ast":null,"code":"var _jsxFileName = \"/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/components/Chat.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport Conversations from \"../models/Conversations\";\nimport Message from \"../models/Message\";\nimport ChatMatches from \"../models/ChatMatches\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n  const history = useHistory();\n  const id = useParams().id;\n  useEffect(() => {\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(`http://localhost:5000/newConvo/${id}`);\n        setConversations(res.data); //console.log(\"convo\", res);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getConversations();\n  }, [id]);\n  useEffect(() => {\n    if (currentChat) {\n      const getMessages = async () => {\n        try {\n          const res = await axios.get(`http://localhost:5000/messages/${currentChat.id}`);\n          setMessages(res.data);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      getMessages();\n    }\n  }, [currentChat]);\n\n  if (!cookie.refreshToken) {\n    history.push(\"/\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messenger\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatMenu\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatMenuWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Search for friends\",\n          className: \"chatMenuInput\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), conversations && conversations.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => setCurrentChat(c),\n          children: /*#__PURE__*/_jsxDEV(Conversations, {\n            conversations: c,\n            currentUser: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this)\n        }, c.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatBox\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatBoxWrapper\",\n        children: currentChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatBoxTop\",\n            children: messages.map(m => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Message, {\n                message: m,\n                own: m.sender === id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatBoxBottom\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"chatMessageInput\",\n              placeholder: \"write something...\" // onChange={(e) => setNewMessage(e.target.value)}\n              // value={newMessage}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"chatSubmitButton\" // onClick={handleSubmit}\n              ,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"noConversationText\",\n          children: \"Open a conversation to start a chat.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"WmFJhBAahDDMR9r7vzGX8roWqqo=\", false, function () {\n  return [useCookies, useHistory, useParams];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/components/Chat.js"],"names":["React","useState","useEffect","useHistory","useParams","useCookies","axios","Conversations","Message","ChatMatches","Chat","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","cookie","setCookie","history","id","getConversations","res","get","data","err","console","log","getMessages","refreshToken","push","map","c","m","sender"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport Conversations from \"../models/Conversations\";\nimport Message from \"../models/Message\";\nimport ChatMatches from \"../models/ChatMatches\";\n\nconst Chat = () => {\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n  const history = useHistory();\n  const id = useParams().id;\n\n  useEffect(() => {\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(`http://localhost:5000/newConvo/${id}`);\n        setConversations(res.data);\n        //console.log(\"convo\", res);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getConversations();\n  }, [id]);\n\n  useEffect(() => {\n    if (currentChat) {\n      const getMessages = async () => {\n        try {\n          const res = await axios.get(\n            `http://localhost:5000/messages/${currentChat.id}`\n          );\n          setMessages(res.data);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n      getMessages();\n    }\n  }, [currentChat]);\n\n  if (!cookie.refreshToken) {\n    history.push(\"/\");\n  }\n\n\n  return (\n    <div className=\"messenger\">\n      <div className=\"chatMenu\">\n        <div className=\"chatMenuWrapper\">\n          <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\n          {conversations &&\n            conversations.map((c) => (\n              <div key = {c.id} onClick={() => setCurrentChat(c)}>\n                <Conversations conversations={c} currentUser={id} />\n              </div>\n            ))}\n        </div>\n      </div>\n      <div className=\"chatBox\">\n        <div className=\"chatBoxWrapper\">\n          {currentChat ? (\n            <>\n              <div className=\"chatBoxTop\">\n                {messages.map((m) => (\n                    <div >\n                      <Message message={m} own={m.sender === id}/>\n                    </div>\n                  ))}\n              </div>\n              <div className=\"chatBoxBottom\">\n                <textarea\n                  className=\"chatMessageInput\"\n                  placeholder=\"write something...\"\n                  // onChange={(e) => setNewMessage(e.target.value)}\n                  // value={newMessage}\n                ></textarea>\n                <button className=\"chatSubmitButton\" \n                // onClick={handleSubmit}\n                >\n                  Send\n                </button>\n              </div>\n            </>\n          ) : (\n            <span className=\"noConversationText\">\n              Open a conversation to start a chat.\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}