{"ast":null,"code":"var _jsxFileName = \"/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/client/src/components/ProfilePictures/ProfilePictures.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { PictureDropZone } from '../ProfileCreation/CreateProfileFields';\nimport Button from '@material-ui/core/Button';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { useSelector } from \"react-redux\";\n\nconst ProfilePictures = () => {\n  const readImages = profilePictures => {\n    profilePictures.forEach(async picture => {\n      const {\n        data\n      } = await axios.get(`http://localhost:3001/api/images/${picture.id}`);\n      let {\n        imageId,\n        imageBlob\n      } = data;\n      const imageData = `data:image/jpeg;base64,${imageBlob}`;\n      setPictureBlobs(pictureBlobs => [...pictureBlobs, imageData]);\n    });\n  };\n\n  const [profilePictures, setProfilePictures] = useState([]);\n  const [pictureBlobs, setPictureBlobs] = useState([]);\n  const [fileArray, setFileArray] = useState([]);\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const history = useHistory();\n  useEffect(() => {\n    const source = axios.CancelToken.source();\n\n    const fetchImageData = async () => {\n      try {\n        setProfilePictures((await axios.get(`http://localhost:3001/api/users/${user.id}/images`, {\n          cancelToken: source.token\n        })).data);\n      } catch (error) {\n        if (axios.isCancel(error)) {} else {\n          throw error;\n        }\n      }\n    };\n\n    if (user.id) {\n      fetchImageData();\n    }\n\n    if (profilePictures.length > 0) readImages(profilePictures);\n    return () => {\n      source.cancel();\n    };\n  }, [user, profilePictures.length]);\n\n  const handleDropZone = files => {\n    setFileArray(files);\n  };\n\n  const reset = () => {\n    setProfilePictures([]);\n    setPictureBlobs([]);\n    setFileArray([]);\n  };\n\n  const readFile = async file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onerror = () => reject(reader.error.message);\n\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n\n      if (file) reader.readAsDataURL(file);\n    });\n  };\n\n  const handleUpload = async () => {\n    let base64Array = [];\n\n    for (const file of fileArray) {\n      const base64Picture = await readFile(file);\n      base64Array.push(base64Picture);\n    }\n\n    const response = await axios.put(`http://localhost:3001/api/users/${user.id}/images`, {\n      profilePic: base64Array\n    });\n    if (response.status === 201) return history.push('/');else reset();\n  };\n\n  const handleDelete = () => {};\n\n  if (pictureBlobs.length === profilePictures.length) return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PictureDropZone, {\n    handleUpload: handleDropZone,\n    initialFiles: pictureBlobs,\n    handleDelete: handleDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => reset(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => handleUpload(),\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 89\n    }\n  }, \"Apply\"));else return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"loading...\");\n};\n\nexport default ProfilePictures;","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/client/src/components/ProfilePictures/ProfilePictures.js"],"names":["React","useEffect","useState","axios","PictureDropZone","Button","Redirect","useHistory","useSelector","ProfilePictures","readImages","profilePictures","forEach","picture","data","get","id","imageId","imageBlob","imageData","setPictureBlobs","pictureBlobs","setProfilePictures","fileArray","setFileArray","user","state","auth","history","source","CancelToken","fetchImageData","cancelToken","token","error","isCancel","length","cancel","handleDropZone","files","reset","readFile","file","Promise","resolve","reject","reader","FileReader","onerror","message","onload","result","readAsDataURL","handleUpload","base64Array","base64Picture","push","response","put","profilePic","status","handleDelete"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport axios from 'axios';\nimport {PictureDropZone} from '../ProfileCreation/CreateProfileFields'\nimport Button from '@material-ui/core/Button';\nimport {Redirect, useHistory} from 'react-router-dom'\nimport {useSelector} from \"react-redux\";\n\nconst ProfilePictures = () => {\n\n    const readImages = (profilePictures) => {\n        profilePictures.forEach(async picture => {\n            const {data} = await axios.get(`http://localhost:3001/api/images/${picture.id}`)\n            let { imageId, imageBlob} = data;\n            const imageData = `data:image/jpeg;base64,${imageBlob}`\n            setPictureBlobs(pictureBlobs => [...pictureBlobs, imageData])\n        })\n    }\n\n    const [profilePictures, setProfilePictures] = useState([])\n    const [pictureBlobs, setPictureBlobs] = useState([])\n    const [fileArray, setFileArray] = useState([])\n    const {user} = useSelector(state => state.auth)\n    const history = useHistory();\n    useEffect(() => {\n        const source = axios.CancelToken.source()\n\n        const fetchImageData = async () => {\n            try {\n                setProfilePictures((await axios.get(`http://localhost:3001/api/users/${user.id}/images`, {\n                    cancelToken: source.token,\n                })).data)\n            } catch (error) {\n                if (axios.isCancel(error)) {\n                } else {\n                    throw error\n                }\n            }\n        }\n        if (user.id) {\n            fetchImageData();\n        }\n        if (profilePictures.length > 0)\n           readImages(profilePictures)\n        return () => {\n            source.cancel()\n        }\n    }, [user, profilePictures.length])\n\n\n    const handleDropZone = files => {\n        setFileArray(files);\n    }\n    const reset = () => {\n        setProfilePictures([])\n        setPictureBlobs([])\n        setFileArray([])\n    }\n\n    const readFile = async (file) => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onerror = () => reject(reader.error.message);\n            reader.onload = () => {\n                resolve(reader.result)\n            };\n            if (file) reader.readAsDataURL(file);\n        });\n    }\n\n    const handleUpload = async () => {\n        let base64Array = [];\n        for (const file of fileArray) {\n            const base64Picture = await readFile(file);\n            base64Array.push(base64Picture);\n        }\n        const response = await axios.put(`http://localhost:3001/api/users/${user.id}/images`, {profilePic: base64Array})\n        if (response.status === 201) return history.push('/')\n        else reset();\n\n    }\n\n    const handleDelete = () => {}\n\n    if (pictureBlobs.length === profilePictures.length) return <>\n        <PictureDropZone\n        handleUpload={handleDropZone}\n        initialFiles={pictureBlobs}\n        handleDelete={handleDelete}/>\n    <Button variant=\"contained\" color=\"secondary\" onClick={() => reset()}>Reset</Button><Button onClick={() => handleUpload()} variant=\"contained\" color=\"secondary\">Apply</Button>\n    </>\n    else return <p>loading...</p>\n}\n\nexport default ProfilePictures"]},"metadata":{},"sourceType":"module"}