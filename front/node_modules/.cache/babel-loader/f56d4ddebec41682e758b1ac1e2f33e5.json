{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\n\nconst useGeoLocation = () => {\n  _s();\n\n  const [location, setLocation] = useState({\n    loaded: false,\n    coordinates: {\n      lat: \"\",\n      lng: \"\"\n    }\n  });\n\n  const onSuccess = location => {\n    setLocation({\n      loaded: true,\n      coordinates: {\n        lat: location.coords.latitude,\n        lng: location.coords.longitude\n      }\n    });\n  };\n\n  const onError = error => {\n    setLocation({\n      loaded: true,\n      error\n    });\n  };\n\n  useEffect(() => {\n    if (!(\"geolocation\" in navigator)) {\n      onError({\n        code: 0,\n        message: \"Geolocation is not available\"\n      });\n      setLocation(state => ({ ...state,\n        loaded: true,\n        error: {\n          code: 0,\n          message: \"Geolocation is not supported by your browser\"\n        }\n      }));\n    }\n\n    navigator.geolocation.getCurrentPosition(onSuccess, onError);\n  }, []);\n  const geocoder = new window.google.maps.Geocoder();\n  const my_location = {\n    lat: location.coordinates.lat,\n    lng: location.coordinates.lng\n  };\n\n  const getLocName = my_location => {\n    geocoder.geocode({\n      'latlng': my_location\n    }, (results, status) => {\n      if (status === window.google.maps.GeocoderStatus.OK) {\n        if (results[0]) {\n          let address = results[0].address_components,\n              loc_name,\n              area_name;\n          address.forEach(comp => {\n            if (comp.types.includes(\"locality\")) {\n              loc_name = comp.long_name;\n            } else if (comp.types.includes(\"administrative_area_level_1\")) {\n              area_name = comp.long_name;\n            }\n          });\n          return `${loc_name}, ${area_name}`;\n        } else {\n          return \"No results found\";\n        }\n      } else {\n        return \"Geocoder failed due to: \" + status;\n      }\n    });\n  }; //console.log(getLocName(my_location));\n\n\n  return location;\n};\n\n_s(useGeoLocation, \"3hDiZVb2uQPYqRJfdpSJpJ9Y568=\");\n\nexport default useGeoLocation;","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/utils/useGeoLocation.js"],"names":["React","useEffect","useState","useGeoLocation","location","setLocation","loaded","coordinates","lat","lng","onSuccess","coords","latitude","longitude","onError","error","navigator","code","message","state","geolocation","getCurrentPosition","geocoder","window","google","maps","Geocoder","my_location","getLocName","geocode","results","status","GeocoderStatus","OK","address","address_components","loc_name","area_name","forEach","comp","types","includes","long_name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst useGeoLocation = () => {\n  const [location, setLocation] = useState({\n    loaded: false,\n    coordinates: { lat: \"\", lng: \"\" },\n  });\n\n  const onSuccess = (location) => {\n    setLocation({\n      loaded: true,\n      coordinates: {\n        lat: location.coords.latitude,\n        lng: location.coords.longitude,\n      },\n    });\n  };\n\n  const onError = (error) => {\n    setLocation({\n      loaded: true,\n      error,\n    });\n  };\n\n  useEffect(() => {\n    if (!(\"geolocation\" in navigator)) {\n      onError({\n        code: 0,\n        message: \"Geolocation is not available\",\n      });\n      setLocation((state) => ({\n        ...state,\n        loaded: true,\n        error: {\n          code: 0,\n          message: \"Geolocation is not supported by your browser\",\n        },\n      }));\n    }\n\n    navigator.geolocation.getCurrentPosition(onSuccess, onError);\n  }, []);\n\n  const geocoder = new window.google.maps.Geocoder();\n  const my_location = {\n    lat: location.coordinates.lat,\n    lng: location.coordinates.lng,\n  };\n\n  const getLocName = (my_location) => {\n    geocoder.geocode({ 'latlng': my_location }, (results, status) => {\n      if (status === window.google.maps.GeocoderStatus.OK) {\n        if (results[0]) {\n          let address = results[0].address_components,\n            loc_name,\n            area_name;\n          address.forEach((comp) => {\n            if (comp.types.includes(\"locality\")) {\n              loc_name = comp.long_name;\n            } else if (comp.types.includes(\"administrative_area_level_1\")) {\n              area_name = comp.long_name;\n            }\n          });\n          return `${loc_name}, ${area_name}`;\n        } else {\n          return \"No results found\";\n        }\n      } else {\n        return \"Geocoder failed due to: \" + status;\n      }\n    });\n  };\n  //console.log(getLocName(my_location));\n\n  return location;\n};\n\nexport default useGeoLocation;\n"]},"metadata":{},"sourceType":"module"}