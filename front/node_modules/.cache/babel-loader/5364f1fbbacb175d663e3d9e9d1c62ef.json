{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable */\nimport { useEffect, useState } from \"react\";\nimport { getDistance } from \"geolib\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport useGeoLocation from \"./useGeoLocation\";\n\nconst useGetDistance = () => {\n  _s();\n\n  const location = useGeoLocation();\n  const [matchLocation, setMatchLocation] = useState([]);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n  useEffect(() => {\n    getCoordinates();\n    console.log(\"location\", location.loaded);\n  }, []);\n\n  const getCoordinates = async () => {\n    try {\n      const response = await axios.get(`http://localhost:5000/users/info/${cookie.refreshToken}`);\n      setMatchLocation(response.data);\n      console.log(\"coord\", response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  for (let i = 0; i < matchLocation.length; i++) {\n    if (location.coordinates.lat && location.coordinates.lng) {\n      const distance = getDistance({\n        latitude: location.coordinates.lat,\n        longitude: location.coordinates.lng\n      }, {\n        latitude: matchLocation[i].geo_lat,\n        longitude: matchLocation[i].geo_long\n      });\n      matchLocation[i].distance = distance;\n    }\n  }\n\n  if (location.loaded) {\n    return matchLocation;\n  }\n};\n\n_s(useGetDistance, \"UQILMVfP45gmSAO27GSKyHjGa/0=\", false, function () {\n  return [useGeoLocation, useCookies];\n});\n\nexport default useGetDistance;","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/utils/useGetDistance.js"],"names":["useEffect","useState","getDistance","useCookies","axios","useGeoLocation","useGetDistance","location","matchLocation","setMatchLocation","cookie","setCookie","getCoordinates","console","log","loaded","response","get","refreshToken","data","error","i","length","coordinates","lat","lng","distance","latitude","longitude","geo_lat","geo_long"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,QAAQ,GAAGF,cAAc,EAA/B;AACA,QAAM,CAACG,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBR,UAAU,CAAC,CAAC,cAAD,CAAD,CAAtC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,cAAc;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBP,QAAQ,CAACQ,MAAjC;AAEC,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMH,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CACpB,oCAAmCP,MAAM,CAACQ,YAAa,EADnC,CAAvB;AAGAT,MAAAA,gBAAgB,CAACO,QAAQ,CAACG,IAAV,CAAhB;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,QAAQ,CAACG,IAA9B;AACD,KAND,CAME,OAAOC,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,GAVD;;AAYA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,aAAa,CAACc,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,QAAId,QAAQ,CAACgB,WAAT,CAAqBC,GAArB,IAA4BjB,QAAQ,CAACgB,WAAT,CAAqBE,GAArD,EAA0D;AACxD,YAAMC,QAAQ,GAAGxB,WAAW,CAC1B;AACEyB,QAAAA,QAAQ,EAAEpB,QAAQ,CAACgB,WAAT,CAAqBC,GADjC;AAEEI,QAAAA,SAAS,EAAErB,QAAQ,CAACgB,WAAT,CAAqBE;AAFlC,OAD0B,EAK1B;AACEE,QAAAA,QAAQ,EAAEnB,aAAa,CAACa,CAAD,CAAb,CAAiBQ,OAD7B;AAEED,QAAAA,SAAS,EAAEpB,aAAa,CAACa,CAAD,CAAb,CAAiBS;AAF9B,OAL0B,CAA5B;AAUAtB,MAAAA,aAAa,CAACa,CAAD,CAAb,CAAiBK,QAAjB,GAA4BA,QAA5B;AACD;AACF;;AACD,MAAInB,QAAQ,CAACQ,MAAb,EAAqB;AACnB,WAAOP,aAAP;AACD;AACF,CAzCD;;GAAMF,c;UACaD,c,EAEWF,U;;;AAwC9B,eAAeG,cAAf","sourcesContent":["/* eslint-disable */\nimport { useEffect, useState } from \"react\";\nimport { getDistance } from \"geolib\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport useGeoLocation from \"./useGeoLocation\";\n\nconst useGetDistance = () => {\n  const location = useGeoLocation();\n  const [matchLocation, setMatchLocation] = useState([]);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n\n  useEffect(() => {\n    getCoordinates();\n  console.log(\"location\", location.loaded);\n\n  }, []);\n\n  const getCoordinates = async () => {\n    try {\n      const response = await axios.get(\n        `http://localhost:5000/users/info/${cookie.refreshToken}`\n      );\n      setMatchLocation(response.data);\n      console.log(\"coord\", response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  for (let i = 0; i < matchLocation.length; i++) {\n    if (location.coordinates.lat && location.coordinates.lng) {\n      const distance = getDistance(\n        {\n          latitude: location.coordinates.lat,\n          longitude: location.coordinates.lng,\n        },\n        {\n          latitude: matchLocation[i].geo_lat,\n          longitude: matchLocation[i].geo_long,\n        }\n      );\n      matchLocation[i].distance = distance;\n    }\n  }\n  if (location.loaded) {\n    return matchLocation;\n  }\n};\n\nexport default useGetDistance;\n"]},"metadata":{},"sourceType":"module"}