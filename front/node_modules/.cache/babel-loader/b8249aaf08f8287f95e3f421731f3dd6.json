{"ast":null,"code":"var _jsxFileName = \"/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/components/Chat.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport Conversations from \"../models/Conversations\";\nimport Message from \"../models/Message\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n  const history = useHistory();\n  const id = useParams().id;\n  const scrollRef = useRef();\n  console.log(\"socket here\", socket);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:5000\"));\n  }, []);\n  useEffect(() => {}, [socket]);\n  useEffect(() => {\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(`http://localhost:5000/newConvo/${id}`);\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getConversations();\n  }, [id]);\n  useEffect(() => {\n    if (currentChat) {\n      const getMessages = async () => {\n        try {\n          const res = await axios.get(`http://localhost:5000/messages/${currentChat.id}`);\n          setMessages(res.data);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      getMessages();\n    }\n  }, [currentChat]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const message = {\n      sender: id,\n      text: newMessage,\n      chat_id: currentChat.id\n    }; // const receiverId =\n    //   currentChat.user1 === id ? currentChat.user1 : currentChat.user2;\n    // console.log(receiverId)\n    // socket.emit(\"sendMessage\", {\n    //   senderId: id,\n    //   receiverId: receiverId,\n    //   text: newMessage,\n    // });\n\n    setMessages([...messages, message]);\n    setNewMessage(\"\");\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/messages\", message); // setMessages([...messages, res.data]);\n      // setNewMessage(\"\");\n      // console.log(res);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]); // useEffect(() => {\n  //   socket.on(\"getMessage\", (data) => {\n  //     setArrivalMessage({\n  //       sender: data.senderId,\n  //       text: data.text,\n  //       time: Date.now(),\n  //     });\n  //   });\n  // }, [socket]);\n  // useEffect(() => {\n  //   arrivalMessage && console.log(\"here\",arrivalMessage)\n  //   arrivalMessage &&\n  //     currentChat.includes(arrivalMessage.sender) &&\n  //     setMessages((prev) => [...prev, arrivalMessage]);\n  // }, [arrivalMessage, currentChat]);\n\n  if (!cookie.refreshToken) {\n    history.push(\"/\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messenger\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatMenu\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"chatMenuInput text-center\",\n          children: \" Your Matches \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), conversations && conversations.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => setCurrentChat(c),\n          children: /*#__PURE__*/_jsxDEV(Conversations, {\n            conversations: c,\n            currentUser: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this)\n        }, uuidv4(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatBox\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatBoxWrapper\",\n        children: currentChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatBoxTop\",\n            children: messages.map(m => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: scrollRef,\n              children: /*#__PURE__*/_jsxDEV(Message, {\n                message: m,\n                own: m.sender === id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 21\n              }, this)\n            }, uuidv4(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatBoxBottom\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"chatMessageInput\",\n              placeholder: \"write something...\",\n              onChange: e => setNewMessage(e.target.value),\n              value: newMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"chatSubmitButton\",\n              onClick: handleSubmit,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"noConversationText\",\n          children: \"Open a conversation to start a chat.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"5BiaIcwR4bCHZf5H+T653I2HnrM=\", false, function () {\n  return [useCookies, useHistory, useParams];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/components/Chat.js"],"names":["React","useState","useEffect","useRef","useHistory","useParams","useCookies","axios","Conversations","Message","v4","uuidv4","io","Chat","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","newMessage","setNewMessage","arrivalMessage","setArrivalMessage","socket","setSocket","cookie","setCookie","history","id","scrollRef","console","log","getConversations","res","get","data","err","getMessages","handleSubmit","e","preventDefault","message","sender","text","chat_id","post","current","scrollIntoView","behavior","refreshToken","push","map","c","m","target","value"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport Conversations from \"../models/Conversations\";\nimport Message from \"../models/Message\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { io } from \"socket.io-client\";\n\nconst Chat = () => {\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n\n  const history = useHistory();\n  const id = useParams().id;\n  const scrollRef = useRef();\n\n  console.log(\"socket here\", socket);\n  useEffect(() => {\n    setSocket(io(\"http://localhost:5000\"));}, []);\n\n  useEffect(() => {\n  }, [socket]);\n\n  useEffect(() => {\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(`http://localhost:5000/newConvo/${id}`);\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getConversations();\n  }, [id]);\n\n  useEffect(() => {\n    if (currentChat) {\n      const getMessages = async () => {\n        try {\n          const res = await axios.get(\n            `http://localhost:5000/messages/${currentChat.id}`\n          );\n          setMessages(res.data);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n      getMessages();\n    }\n  }, [currentChat]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const message = {\n      sender: id,\n      text: newMessage,\n      chat_id: currentChat.id,\n    };\n\n    // const receiverId =\n    //   currentChat.user1 === id ? currentChat.user1 : currentChat.user2;\n    // console.log(receiverId)\n\n    // socket.emit(\"sendMessage\", {\n    //   senderId: id,\n    //   receiverId: receiverId,\n    //   text: newMessage,\n    // });\n\n    setMessages([...messages, message]);\n    setNewMessage(\"\");\n    try {\n      const res = await axios.post(\"http://localhost:5000/messages\", message);\n      // setMessages([...messages, res.data]);\n      // setNewMessage(\"\");\n      // console.log(res);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // useEffect(() => {\n  //   socket.on(\"getMessage\", (data) => {\n  //     setArrivalMessage({\n  //       sender: data.senderId,\n  //       text: data.text,\n  //       time: Date.now(),\n  //     });\n  //   });\n  // }, [socket]);\n\n  // useEffect(() => {\n  //   arrivalMessage && console.log(\"here\",arrivalMessage)\n  //   arrivalMessage &&\n  //     currentChat.includes(arrivalMessage.sender) &&\n  //     setMessages((prev) => [...prev, arrivalMessage]);\n  // }, [arrivalMessage, currentChat]);\n\n  if (!cookie.refreshToken) {\n    history.push(\"/\");\n  }\n\n  return (\n    <div className=\"messenger\">\n      <div className=\"chatMenu\">\n        <div className=\"card\">\n          <p className=\"chatMenuInput text-center\" > Your Matches </p>\n          {conversations &&\n            conversations.map((c) => (\n              <div key={uuidv4()} onClick={() => setCurrentChat(c)}>\n                <Conversations conversations={c} currentUser={id} />\n              </div>\n            ))}\n        </div>\n      </div>\n      <div className=\"chatBox\">\n        <div className=\"chatBoxWrapper\">\n          {currentChat ? (\n            <>\n              <div className=\"chatBoxTop\">\n                {messages.map((m) => (\n                  <div key={uuidv4()} ref={scrollRef}>\n                    <Message message={m} own={m.sender === id} />\n                  </div>\n                ))}\n              </div>\n              <div className=\"chatBoxBottom\">\n                <textarea\n                  className=\"chatMessageInput\"\n                  placeholder=\"write something...\"\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  value={newMessage}\n                ></textarea>\n                <button className=\"chatSubmitButton\" onClick={handleSubmit}>\n                  Send\n                </button>\n              </div>\n            </>\n          ) : (\n            <span className=\"noConversationText\">\n              Open a conversation to start a chat.\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}