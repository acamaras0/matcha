{"ast":null,"code":"var _jsxFileName = \"/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/client/src/components/MainPage/Messenger/Messenger.js\";\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport Footer from '../Footer/Footer';\nimport { useSelector } from 'react-redux';\nimport axios from \"axios\";\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  },\n  chatSection: {\n    width: '100%',\n    height: '80vh'\n  },\n  headBG: {\n    backgroundColor: '#e0e0e0'\n  },\n  borderRight500: {\n    borderRight: '1px solid #e0e0e0'\n  },\n  messageArea: {\n    height: '70vh',\n    overflowY: 'auto'\n  },\n  divider: {\n    marginTop: '3rem'\n  }\n});\n\nconst ConversationEntry = ({\n  conversationUser,\n  handleConversation,\n  current\n}) => {\n  const [profilePic, setProfilepic] = useState('');\n  useEffect(() => {\n    const getPic = async () => {\n      setProfilepic((await axios.get(`http://localhost:3001/api/images/${conversationUser.profilePicId}`)).data.imageBlob);\n    };\n\n    getPic();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListItem, {\n    selected: current,\n    button: true,\n    key: conversationUser.id,\n    onClick: () => handleConversation(conversationUser),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    alt: conversationUser.username,\n    src: `data:image/png;base64, ${profilePic}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: conversationUser.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, conversationUser.username), /*#__PURE__*/React.createElement(ListItemText, {\n    secondary: \"online\",\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst ConversationList = ({\n  conversations,\n  userId,\n  handleConversation,\n  currentConversationId\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    className: classes.borderRight500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, conversations && conversations.map(conversation => {\n    const conversationUser = conversation.user1 === userId ? {\n      userId: conversation.user2,\n      firstName: conversation.user2_firstname,\n      lastName: conversation.user2_lastname,\n      username: conversation.user2_username,\n      profilePicId: conversation.user2_profilepic\n    } : {\n      userId: conversation.user1,\n      firstName: conversation.user1_firstname,\n      lastName: conversation.user1_lastname,\n      username: conversation.user1_username,\n      profilePicId: conversation.user1_profilepic\n    };\n    conversationUser.conversationId = conversation.id;\n    if (currentConversationId === conversation.id) return /*#__PURE__*/React.createElement(ConversationEntry, {\n      key: conversation.id,\n      conversationUser: conversationUser,\n      handleConversation: handleConversation,\n      current: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 28\n      }\n    });\n    return /*#__PURE__*/React.createElement(ConversationEntry, {\n      key: conversation.id,\n      conversationUser: conversationUser,\n      handleConversation: handleConversation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 24\n      }\n    });\n  })));\n};\n\nconst TextBar = ({\n  socket,\n  conversationId,\n  senderId,\n  receiverId\n}) => {\n  const [message, setMessage] = useState('');\n\n  const handleChange = ev => setMessage(ev.target.value);\n\n  const handleSubmit = ev => {\n    ev.preventDefault();\n    socket.emit('newMessage', {\n      message,\n      conversationId,\n      senderId,\n      receiverId\n    });\n    setMessage('');\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    style: {\n      padding: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    color: \"secondary\",\n    id: \"outlined-basic-email\",\n    label: \"Type Something\",\n    onChange: handleChange,\n    value: message,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Fab, {\n    color: \"secondary\",\n    \"aria-label\": \"add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(SendIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 81\n    }\n  })))));\n};\n\nconst MessageHistory = ({\n  messages,\n  userId,\n  socket,\n  currentConversationId,\n  receiver\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    className: classes.messageArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, messages && messages.map(message => {\n    const align = message.sender == userId ? 'right' : 'left';\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: message.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      align: align,\n      primary: message.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 29\n      }\n    }))));\n  })), currentConversationId && /*#__PURE__*/React.createElement(TextBar, {\n    socket: socket,\n    conversationId: currentConversationId,\n    senderId: userId,\n    receiverId: receiver,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 35\n    }\n  }));\n};\n\nconst Messenger = ({\n  socket\n}) => {\n  const classes = useStyles();\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const [conversations, setConversations] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [currentConversationId, setCurrentConversationId] = useState('');\n  const [receiver, setReceiver] = useState('');\n  useEffect(() => {\n    socket.on('conversationList', conversations => {\n      setConversations(conversations);\n    });\n    socket.on('conversation', conversation => {\n      if (conversation.id = currentConversationId) setMessages(conversation.conversation);\n    });\n    socket.on('my error', error => console.log(error));\n    return () => {\n      socket.off('conversationList');\n      socket.off('conversation');\n    };\n  });\n  useEffect(() => {\n    if (currentConversationId) socket.emit('getConversation', {\n      userId: user.id,\n      conversationId: currentConversationId\n    });\n  }, [currentConversationId]);\n\n  const handleConversation = conversationUser => {\n    setCurrentConversationId(conversationUser.conversationId);\n    setReceiver(conversationUser.userId);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"secondary\",\n    variant: \"h5\",\n    className: \"header-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }, \"Messenger\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    component: Paper,\n    className: classes.chatSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ConversationList, {\n    conversations: conversations,\n    handleConversation: handleConversation,\n    userId: user.id,\n    currentConversationId: currentConversationId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(MessageHistory, {\n    messages: messages,\n    userId: user.id,\n    socket: socket,\n    currentConversationId: currentConversationId,\n    receiver: receiver,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Messenger;","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/client/src/components/MainPage/Messenger/Messenger.js"],"names":["React","useState","useEffect","makeStyles","Paper","Grid","Divider","TextField","Typography","List","ListItem","ListItemIcon","ListItemText","Avatar","Fab","SendIcon","Footer","useSelector","axios","useStyles","table","minWidth","chatSection","width","height","headBG","backgroundColor","borderRight500","borderRight","messageArea","overflowY","divider","marginTop","ConversationEntry","conversationUser","handleConversation","current","profilePic","setProfilepic","getPic","get","profilePicId","data","imageBlob","id","username","ConversationList","conversations","userId","currentConversationId","classes","map","conversation","user1","user2","firstName","user2_firstname","lastName","user2_lastname","user2_username","user2_profilepic","user1_firstname","user1_lastname","user1_username","user1_profilepic","conversationId","TextBar","socket","senderId","receiverId","message","setMessage","handleChange","ev","target","value","handleSubmit","preventDefault","emit","padding","MessageHistory","messages","receiver","align","sender","Messenger","user","state","auth","setConversations","setMessages","setCurrentConversationId","setReceiver","on","error","console","log","off"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport Footer from '../Footer/Footer';\nimport {useSelector} from 'react-redux'\nimport axios from \"axios\";\n\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n    chatSection: {\n        width: '100%',\n        height: '80vh'\n    },\n    headBG: {\n        backgroundColor: '#e0e0e0'\n    },\n    borderRight500: {\n        borderRight: '1px solid #e0e0e0'\n    },\n    messageArea: {\n        height: '70vh',\n        overflowY: 'auto'\n    },\n    divider: {\n        marginTop: '3rem'\n    }\n});\n\nconst ConversationEntry = ({conversationUser, handleConversation, current}) => {\n    const [profilePic, setProfilepic] = useState('')\n    useEffect(() => {\n        const getPic = async () => {\n            setProfilepic((await axios.get(`http://localhost:3001/api/images/${conversationUser.profilePicId}`)).data.imageBlob)\n        }\n        getPic();\n    }, [])\n    return <>\n        <ListItem selected={current} button key={conversationUser.id} onClick={() => handleConversation(conversationUser)}>\n            <ListItemIcon>\n                <Avatar alt={conversationUser.username} src={`data:image/png;base64, ${profilePic}`}/>\n            </ListItemIcon>\n            <ListItemText primary={conversationUser.username}>{conversationUser.username}</ListItemText>\n            <ListItemText secondary=\"online\" align=\"right\"></ListItemText>\n        </ListItem>\n        <Divider/>\n    </>\n}\n\n\nconst ConversationList = ({conversations, userId, handleConversation, currentConversationId}) => {\n\n    const classes = useStyles();\n\n    return <Grid item xs={3} className={classes.borderRight500}>\n        <List>\n            {conversations && conversations.map(conversation => {\n                const conversationUser = conversation.user1 === userId\n                    ? {\n                        userId: conversation.user2,\n                        firstName: conversation.user2_firstname,\n                        lastName: conversation.user2_lastname,\n                        username: conversation.user2_username,\n                        profilePicId: conversation.user2_profilepic\n                    }\n                    : {\n                        userId: conversation.user1,\n                        firstName: conversation.user1_firstname,\n                        lastName: conversation.user1_lastname,\n                        username: conversation.user1_username,\n                        profilePicId: conversation.user1_profilepic\n                    }\n                conversationUser.conversationId = conversation.id\n                if (currentConversationId === conversation.id)\n                    return <ConversationEntry key={conversation.id} conversationUser={conversationUser}\n                                              handleConversation={handleConversation} current/>\n                return <ConversationEntry key={conversation.id} conversationUser={conversationUser}\n                                          handleConversation={handleConversation}/>\n\n            })\n            }\n        </List>\n    </Grid>\n}\n\nconst TextBar = ({socket, conversationId, senderId, receiverId}) => {\n    const [message, setMessage] = useState('');\n\n    const handleChange = (ev) => setMessage(ev.target.value)\n\n    const handleSubmit = (ev) => {\n        ev.preventDefault();\n        socket.emit('newMessage', {message, conversationId, senderId, receiverId});\n        setMessage('')\n    }\n\n    return <Grid container style={{padding: '20px'}}>\n        <Grid item xs={11}>\n            <TextField color=\"secondary\"\n                       id=\"outlined-basic-email\"\n                       label=\"Type Something\"\n                       onChange={handleChange}\n                       value={message}\n                       fullWidth />\n        </Grid>\n        <Grid item xs={1} align=\"right\">\n            <div onClick={handleSubmit}><Fab color=\"secondary\" aria-label=\"add\"><SendIcon/></Fab></div>\n        </Grid>\n    </Grid>\n}\n\nconst MessageHistory = ({messages, userId, socket, currentConversationId, receiver}) => {\n    const classes = useStyles();\n    return <Grid item xs={9}>\n        <List className={classes.messageArea}>\n            {messages && messages.map(message => {\n                const align = message.sender == userId ? 'right' : 'left'\n                return <ListItem key={message.id}>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <ListItemText align={align} primary={message.message}></ListItemText>\n                        </Grid>\n                    </Grid>\n                </ListItem>\n            })\n            }\n        </List>\n\n        {currentConversationId && <TextBar socket={socket}\n                 conversationId={currentConversationId}\n                 senderId={userId}\n                 receiverId={receiver}/>}\n    </Grid>\n}\n\nconst Messenger = ({socket}) => {\n    const classes = useStyles();\n    const {user} = useSelector(state => state.auth)\n    const [conversations, setConversations] = useState('')\n    const [messages, setMessages] = useState([])\n    const [currentConversationId, setCurrentConversationId] = useState('')\n    const [receiver, setReceiver] = useState('')\n    useEffect(() => {\n                socket.on('conversationList',\n                    (conversations) => {\n                        setConversations(conversations)\n                    }\n                )\n                socket.on('conversation', conversation => {\n                        if (conversation.id = currentConversationId)\n                            setMessages(conversation.conversation)\n                    }\n                )\n                socket.on('my error', (error) => console.log(error));\n\n                return () => {\n                    socket.off('conversationList')\n                    socket.off('conversation')\n                }\n    })\n\n    useEffect(() => {\n        if (currentConversationId)\n            socket.emit('getConversation', {userId: user.id, conversationId: currentConversationId})\n}, [currentConversationId])\n\n    const handleConversation = (conversationUser) => {\n            setCurrentConversationId(conversationUser.conversationId)\n            setReceiver(conversationUser.userId)\n    }\n\n\n    return (\n        <div>\n            <Grid container className={classes.divider}>\n                <Grid item xs={12}>\n                    <Typography color=\"secondary\" variant=\"h5\" className=\"header-message\">Messenger</Typography>\n                    <Grid container component={Paper} className={classes.chatSection}>\n                        <ConversationList conversations={conversations}\n                                          handleConversation={handleConversation}\n                                          userId={user.id}\n                                          currentConversationId={currentConversationId}/>\n                        <MessageHistory messages={messages}\n                                        userId={user.id}\n                                        socket={socket}\n                                        currentConversationId={currentConversationId}\n                                        receiver={receiver}/>\n                    </Grid>\n                </Grid>\n                <Divider/>\n\n            </Grid>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default Messenger;\n"]},"metadata":{},"sourceType":"module"}