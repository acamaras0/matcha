{"ast":null,"code":"var _jsxFileName = \"/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/components/Chat.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport Conversations from \"../models/Conversations\";\nimport Message from \"../models/Message\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Chat = ({\n  socket\n}) => {\n  _s();\n\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n  const history = useHistory();\n  const id = useParams().id;\n  const scrollRef = useRef();\n  useEffect(() => {\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(`http://localhost:5000/newConvo/${id}`);\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getConversations();\n  }, [id]);\n  useEffect(() => {\n    if (currentChat) {\n      const getMessages = async () => {\n        try {\n          const res = await axios.get(`http://localhost:5000/messages/${currentChat.id}`);\n          setMessages(res.data);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n      getMessages();\n    }\n  }, [currentChat]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const message = {\n      sender: id,\n      text: newMessage,\n      chat_id: currentChat.id\n    };\n    const receiverId = currentChat.user1 === id ? currentChat.user1 : currentChat.user2; // console.log(receiverId)\n\n    socket.current.emit(\"sendMessage\", {\n      senderId: id,\n      receiverId: receiverId,\n      text: newMessage\n    });\n    setMessages([...messages, message]);\n    setNewMessage(\"\");\n\n    try {\n      const res = await axios.post(\"http://localhost:5000/messages\", message); // setMessages([...messages, res.data]);\n      // setNewMessage(\"\");\n      // console.log(res);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  useEffect(() => {\n    socket.on(\"getMessage\", data => {\n      setArrivalMessage({\n        sender: data.senderId,\n        text: data.text,\n        time: Date.now()\n      });\n    });\n  }, []);\n  useEffect(() => {\n    arrivalMessage && currentChat.includes(arrivalMessage.sender) && setM;\n  }, [arrivalMessage]);\n\n  if (!cookie.refreshToken) {\n    history.push(\"/\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messenger\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatMenu\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatMenuWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Search for friends\",\n          className: \"chatMenuInput\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), conversations && conversations.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => setCurrentChat(c),\n          children: /*#__PURE__*/_jsxDEV(Conversations, {\n            conversations: c,\n            currentUser: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatBox\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatBoxWrapper\",\n        children: currentChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatBoxTop\",\n            children: messages.map(m => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: scrollRef,\n              children: /*#__PURE__*/_jsxDEV(Message, {\n                message: m,\n                own: m.sender === id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 21\n              }, this)\n            }, m.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatBoxBottom\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"chatMessageInput\",\n              placeholder: \"write something...\",\n              onChange: e => setNewMessage(e.target.value),\n              value: newMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"chatSubmitButton\",\n              onClick: handleSubmit,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"noConversationText\",\n          children: \"Open a conversation to start a chat.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"p1vZKG9mX17QZqeGOau0OEn35AI=\", false, function () {\n  return [useCookies, useHistory, useParams];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/components/Chat.js"],"names":["React","useState","useEffect","useRef","useHistory","useParams","useCookies","axios","Conversations","Message","io","Chat","socket","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","newMessage","setNewMessage","arrivalMessage","setArrivalMessage","cookie","setCookie","history","id","scrollRef","getConversations","res","get","data","err","console","log","getMessages","handleSubmit","e","preventDefault","message","sender","text","chat_id","receiverId","user1","user2","current","emit","senderId","post","scrollIntoView","behavior","on","time","Date","now","includes","setM","refreshToken","push","map","c","m","target","value"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport Conversations from \"../models/Conversations\";\nimport Message from \"../models/Message\";\nimport { io } from \"socket.io-client\";\n\nconst Chat = ({ socket }) => {\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n\n  const history = useHistory();\n  const id = useParams().id;\n  const scrollRef = useRef();\n\n  useEffect(() => {\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(`http://localhost:5000/newConvo/${id}`);\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getConversations();\n  }, [id]);\n\n  useEffect(() => {\n    if (currentChat) {\n      const getMessages = async () => {\n        try {\n          const res = await axios.get(\n            `http://localhost:5000/messages/${currentChat.id}`\n          );\n          setMessages(res.data);\n        } catch (err) {\n          console.log(err);\n        }\n      };\n      getMessages();\n    }\n  }, [currentChat]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const message = {\n      sender: id,\n      text: newMessage,\n      chat_id: currentChat.id,\n    };\n\n    const receiverId =\n      currentChat.user1 === id ? currentChat.user1 : currentChat.user2;\n    // console.log(receiverId)\n\n    socket.current.emit(\"sendMessage\", {\n      senderId: id,\n      receiverId: receiverId,\n      text: newMessage,\n    });\n\n    setMessages([...messages, message]);\n    setNewMessage(\"\");\n    try {\n      const res = await axios.post(\"http://localhost:5000/messages\", message);\n      // setMessages([...messages, res.data]);\n      // setNewMessage(\"\");\n      // console.log(res);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  useEffect(() => {\n    socket.on(\"getMessage\", (data) => {\n      setArrivalMessage({\n        sender: data.senderId,\n        text: data.text,\n        time: Date.now(),\n      });\n    });\n  }, []);\n\n  useEffect (() =>{\n    arrivalMessage && currentChat.includes(arrivalMessage.sender) &&\n    setM\n\n  }, [arrivalMessage])\n\n  if (!cookie.refreshToken) {\n    history.push(\"/\");\n  }\n\n  return (\n    <div className=\"messenger\">\n      <div className=\"chatMenu\">\n        <div className=\"chatMenuWrapper\">\n          <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\n          {conversations &&\n            conversations.map((c) => (\n              <div key={id} onClick={() => setCurrentChat(c)}>\n                <Conversations conversations={c} currentUser={id} />\n              </div>\n            ))}\n        </div>\n      </div>\n      <div className=\"chatBox\">\n        <div className=\"chatBoxWrapper\">\n          {currentChat ? (\n            <>\n              <div className=\"chatBoxTop\">\n                {messages.map((m) => (\n                  <div key={m.id} ref={scrollRef}>\n                    <Message message={m} own={m.sender === id} />\n                  </div>\n                ))}\n              </div>\n              <div className=\"chatBoxBottom\">\n                <textarea\n                  className=\"chatMessageInput\"\n                  placeholder=\"write something...\"\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  value={newMessage}\n                ></textarea>\n                <button className=\"chatSubmitButton\" onClick={handleSubmit}>\n                  Send\n                </button>\n              </div>\n            </>\n          ) : (\n            <span className=\"noConversationText\">\n              Open a conversation to start a chat.\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}