{"ast":null,"code":"import { RESET_PASSWORD, RESET_PASSWORD_FAIL, SET_MESSAGE } from './types';\nimport AuthService from '../services/auth.service';\n\nconst resetPassword = (password, confirmPassword) => dispatch => AuthService.resetPassword(password, confirmPassword).then(data => {\n  dispatch({\n    type: RESET_PASSWORD,\n    payload: {\n      user: data\n    }\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: RESET_PASSWORD_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst validateProfile = uid => async dispatch => {\n  const result = await AuthService.validateProfile(uid);\n  if (result.status === 200) dispatch({\n    type: SET_MESSAGE,\n    payload: 'Profile validated!'\n  });else dispatch({\n    type: SET_MESSAGE,\n    payload: 'Could not validate profile'\n  });\n};\n\nexport default {\n  resetPassword,\n  validateProfile\n};","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/client/src/actions/resetPassword.js"],"names":["RESET_PASSWORD","RESET_PASSWORD_FAIL","SET_MESSAGE","AuthService","resetPassword","password","confirmPassword","dispatch","then","data","type","payload","user","Promise","resolve","error","message","response","toString","reject","validateProfile","uid","result","status"],"mappings":"AAAA,SACIA,cADJ,EAEIC,mBAFJ,EAGIC,WAHJ,QAIO,SAJP;AAMA,OAAOC,WAAP,MAAwB,0BAAxB;;AAEA,MAAMC,aAAa,GAAG,CAACC,QAAD,EAAWC,eAAX,KAAgCC,QAAD,IAAcJ,WAAW,CAACC,aAAZ,CAA0BC,QAA1B,EAAoCC,eAApC,EAAqDE,IAArD,CAC9DC,IAAD,IAAU;AACNF,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAEV,cADD;AAELW,IAAAA,OAAO,EAAE;AAAEC,MAAAA,IAAI,EAAEH;AAAR;AAFJ,GAAD,CAAR;AAIA,SAAOI,OAAO,CAACC,OAAR,EAAP;AACH,CAP8D,EAQ9DC,KAAD,IAAW;AACP,QAAMC,OAAO,GAAID,KAAK,CAACE,QAAN,IACVF,KAAK,CAACE,QAAN,CAAeR,IADL,IAEVM,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OAFX,IAGTD,KAAK,CAACC,OAHG,IAGQD,KAAK,CAACG,QAAN,EAHxB;AAIAX,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAET;AADD,GAAD,CAAR;AAGAM,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAER,WADD;AAELS,IAAAA,OAAO,EAAEK;AAFJ,GAAD,CAAR;AAIA,SAAOH,OAAO,CAACM,MAAR,EAAP;AACH,CArB8D,CAAnE;;AAwBA,MAAMC,eAAe,GAAIC,GAAD,IAAS,MAAOd,QAAP,IAAoB;AACjD,QAAMe,MAAM,GAAG,MAAMnB,WAAW,CAACiB,eAAZ,CAA4BC,GAA5B,CAArB;AACA,MAAIC,MAAM,CAACC,MAAP,KAAkB,GAAtB,EAA2BhB,QAAQ,CAAC;AAACG,IAAAA,IAAI,EAAER,WAAP;AAAoBS,IAAAA,OAAO,EAAE;AAA7B,GAAD,CAAR,CAA3B,KACKJ,QAAQ,CAAC;AAACG,IAAAA,IAAI,EAAER,WAAP;AAAoBS,IAAAA,OAAO,EAAE;AAA7B,GAAD,CAAR;AACR,CAJD;;AAMA,eAAe;AACXP,EAAAA,aADW;AAEXgB,EAAAA;AAFW,CAAf","sourcesContent":["import {\n    RESET_PASSWORD,\n    RESET_PASSWORD_FAIL,\n    SET_MESSAGE,\n} from './types';\n\nimport AuthService from '../services/auth.service';\n\nconst resetPassword = (password, confirmPassword) => (dispatch) => AuthService.resetPassword(password, confirmPassword).then(\n    (data) => {\n        dispatch({\n            type: RESET_PASSWORD,\n            payload: { user: data },\n        });\n        return Promise.resolve();\n    },\n    (error) => {\n        const message = (error.response\n            && error.response.data\n            && error.response.data.message)\n            || error.message || error.toString();\n        dispatch({\n            type: RESET_PASSWORD_FAIL,\n        });\n        dispatch({\n            type: SET_MESSAGE,\n            payload: message,\n        });\n        return Promise.reject();\n    },\n);\n\nconst validateProfile = (uid) => async (dispatch) => {\n    const result = await AuthService.validateProfile(uid)\n    if (result.status === 200) dispatch({type: SET_MESSAGE, payload: 'Profile validated!' })\n    else dispatch({type: SET_MESSAGE, payload: 'Could not validate profile'})\n}\n\nexport default {\n    resetPassword,\n    validateProfile,\n}"]},"metadata":{},"sourceType":"module"}