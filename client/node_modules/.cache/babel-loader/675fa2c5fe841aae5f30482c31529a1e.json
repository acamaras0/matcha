{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = 'http://localhost:3001/api';\n\nconst register = async (username, firstname, lastname, mail, password) => {\n  const result = await axios.post(`${baseUrl}/users`, {\n    username,\n    firstname,\n    lastname,\n    mail,\n    password\n  });\n  return result.data;\n};\n\nconst login = async (username, password) => axios.post(`${baseUrl}/login`, {\n  username,\n  password\n}).then(response => {\n  if (response.data.token) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n  }\n\n  return response.data;\n});\n\nconst logout = async () => {\n  await axios.delete(`${baseUrl}/login`);\n  localStorage.removeItem('user');\n};\n\nconst forgotPassword = async username => {\n  const result = await axios.post(`${baseUrl}/users/forgot-password`, {\n    username\n  });\n  return result.data;\n};\n\nconst updatePosition = async coords => {\n  const {\n    token\n  } = JSON.parse(localStorage.getItem('user')) || {};\n  axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // TODO: unify\n\n  await axios.post(`${baseUrl}/users/location`, coords);\n};\n\nconst getPositionByIp = async () => {\n  const config = {\n    headers: {\n      \"X-Requested-With\": \"matcha\"\n    }\n  };\n  const ip = (await axios.get('https://cors-anywhere.herokuapp.com/http://api.ipify.org/', config)).data;\n  const data = (await axios.get(`http://extreme-ip-lookup.com/json/${ip}`)).data;\n  if (!data) throw new Error('Could not get location!');\n  return {\n    long: data.lon,\n    lat: data.lat\n  };\n};\n\nconst resetPassword = async (password, confirmPassword) => {\n  let key = document.location.href;\n  key = key.split('/');\n  const result = await axios.post(`${baseUrl}/users/reset-password/${key[key.length - 1]}`, {\n    new_password: password,\n    repeat_password: confirmPassword\n  });\n  return result.data;\n};\n\nconst validateProfile = async uid => {\n  return await axios.get(`${baseUrl}/users/register/${uid}`);\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  forgotPassword,\n  resetPassword,\n  updatePosition,\n  validateProfile,\n  getPositionByIp\n};","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/client/src/services/auth.service.js"],"names":["axios","baseUrl","register","username","firstname","lastname","mail","password","result","post","data","login","then","response","token","localStorage","setItem","JSON","stringify","logout","delete","removeItem","forgotPassword","updatePosition","coords","parse","getItem","defaults","headers","common","getPositionByIp","config","ip","get","Error","long","lon","lat","resetPassword","confirmPassword","key","document","location","href","split","length","new_password","repeat_password","validateProfile","uid"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = 'http://localhost:3001/api';\n\nconst register = async (username, firstname, lastname, mail, password) => {\n  const result = await axios.post(`${baseUrl}/users`, {\n    username,\n    firstname,\n    lastname,\n    mail,\n    password,\n  });\n  return result.data;\n}\n\nconst login = async (username, password) => axios.post(`${baseUrl}/login`, {\n  username,\n  password,\n}).then((response) => {\n  if (response.data.token) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n  }\n  return response.data;\n});\n\nconst logout = async () => {\n  await axios.delete(`${baseUrl}/login`)\n  localStorage.removeItem('user');\n};\n\nconst forgotPassword = async (username) => {\n  const result = await axios.post(`${baseUrl}/users/forgot-password`, {\n    username,\n  });\n  return result.data;\n};\n\nconst updatePosition = async (coords) => {\n  const {token} = JSON.parse(localStorage.getItem('user')) || {};\n  axios.defaults.headers.common['Authorization'] = `Bearer ${ token }`; // TODO: unify\n  await axios.post(`${baseUrl}/users/location`, coords);\n}\n\nconst getPositionByIp = async () => {\n  const config = {\n    headers: {\n      \"X-Requested-With\": \"matcha\"\n    }\n  }\n  const ip = (await axios.get('https://cors-anywhere.herokuapp.com/http://api.ipify.org/', config)).data;\n  const data = (await axios.get(`http://extreme-ip-lookup.com/json/${ip}`)).data\n  if (!data) throw new Error('Could not get location!')\n  return {long: data.lon, lat: data.lat}\n}\n\nconst resetPassword = async (password, confirmPassword) => {\n  let key = document.location.href;\n  key = key.split('/');\n\n  const result = await axios.post(`${baseUrl}/users/reset-password/${key[key.length - 1]}`, {\n    new_password: password,\n    repeat_password: confirmPassword\n  });\n  return result.data;\n}\n\nconst validateProfile = async (uid) => {\n  return await axios.get(`${baseUrl}/users/register/${uid}`);\n}\n\nexport default {\n  register,\n  login,\n  logout,\n  forgotPassword,\n  resetPassword,\n  updatePosition,\n  validateProfile,\n  getPositionByIp\n};\n"]},"metadata":{},"sourceType":"module"}