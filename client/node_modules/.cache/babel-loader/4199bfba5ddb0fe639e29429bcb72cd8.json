{"ast":null,"code":"import { UPDATE_NAME_SUCCESS, UPDATE_NAME_FAIL, UPDATE_BIO_SUCCESS, UPDATE_BIO_FAIL, UPDATE_GENDER_SUCCESS, UPDATE_GENDER_FAIL, UPDATE_PREFERENCE_SUCCESS, UPDATE_PREFERENCE_FAIL, UPDATE_MAIL_SUCCESS, UPDATE_MAIL_FAIL, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, UPDATE_DELETE_SUCCESS, UPDATE_TAGS_SUCCESS, UPDATE_TAGS_FAIL, SET_MESSAGE } from './types';\nimport UpdateService from '../services/update.service';\n\nconst updateFirstLastName = (firstName, lastName) => dispatch => UpdateService.updateFirstLastName(firstName, lastName).then(response => {\n  dispatch({\n    type: UPDATE_NAME_SUCCESS,\n    payload: response.message\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: UPDATE_NAME_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst updateBio = bio => dispatch => UpdateService.updateBio(bio).then(data => {\n  dispatch({\n    type: UPDATE_BIO_SUCCESS,\n    payload: data.message\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: UPDATE_BIO_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst updateGender = gender => dispatch => UpdateService.updateGender(gender).then(response => {\n  dispatch({\n    type: UPDATE_GENDER_SUCCESS,\n    payload: response.message\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: UPDATE_GENDER_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst updatePreference = preference => dispatch => UpdateService.updatePreference(preference).then(response => {\n  dispatch({\n    type: UPDATE_PREFERENCE_SUCCESS,\n    payload: response.message\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: UPDATE_PREFERENCE_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst updateMail = mail => dispatch => UpdateService.updateMail(mail).then(response => {\n  dispatch({\n    type: UPDATE_MAIL_SUCCESS,\n    payload: response.message\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: UPDATE_MAIL_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst updatePassword = (oldPassword, newPassword) => dispatch => UpdateService.updatePassword(oldPassword, newPassword).then(response => {\n  dispatch({\n    type: UPDATE_PASSWORD_SUCCESS,\n    payload: response.message\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: UPDATE_PASSWORD_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst updateTags = tags => dispatch => UpdateService.updateTags(tags).then(response => {\n  dispatch({\n    type: UPDATE_TAGS_SUCCESS,\n    payload: response.message\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: UPDATE_TAGS_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst deleteUser = () => dispatch => {\n  UpdateService.deleteUser();\n  dispatch({\n    type: UPDATE_DELETE_SUCCESS\n  });\n};\n\nconst updatePosition = position => dispatch => UpdateService.updatePosition(position).then(response => {\n  dispatch({\n    type: 'UPDATE_POSITION_SUCCESS'\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nexport default {\n  updateTags,\n  updateFirstLastName,\n  updateBio,\n  updateGender,\n  updatePreference,\n  updateMail,\n  updatePassword,\n  deleteUser,\n  updatePosition\n};","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/client/src/actions/updateUserAction.js"],"names":["UPDATE_NAME_SUCCESS","UPDATE_NAME_FAIL","UPDATE_BIO_SUCCESS","UPDATE_BIO_FAIL","UPDATE_GENDER_SUCCESS","UPDATE_GENDER_FAIL","UPDATE_PREFERENCE_SUCCESS","UPDATE_PREFERENCE_FAIL","UPDATE_MAIL_SUCCESS","UPDATE_MAIL_FAIL","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","UPDATE_DELETE_SUCCESS","UPDATE_TAGS_SUCCESS","UPDATE_TAGS_FAIL","SET_MESSAGE","UpdateService","updateFirstLastName","firstName","lastName","dispatch","then","response","type","payload","message","Promise","resolve","error","data","toString","reject","updateBio","bio","updateGender","gender","updatePreference","preference","updateMail","mail","updatePassword","oldPassword","newPassword","updateTags","tags","deleteUser","updatePosition","position"],"mappings":"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","sourcesContent":["import {\n    UPDATE_NAME_SUCCESS,\n    UPDATE_NAME_FAIL,\n    UPDATE_BIO_SUCCESS,\n    UPDATE_BIO_FAIL,\n    UPDATE_GENDER_SUCCESS,\n    UPDATE_GENDER_FAIL,\n    UPDATE_PREFERENCE_SUCCESS,\n    UPDATE_PREFERENCE_FAIL,\n    UPDATE_MAIL_SUCCESS,\n    UPDATE_MAIL_FAIL,\n    UPDATE_PASSWORD_SUCCESS,\n    UPDATE_PASSWORD_FAIL,\n    UPDATE_DELETE_SUCCESS,\n    UPDATE_TAGS_SUCCESS,\n    UPDATE_TAGS_FAIL,\n    SET_MESSAGE,\n} from './types';\n\nimport UpdateService from '../services/update.service';\n\nconst updateFirstLastName = (firstName, lastName) => (dispatch) => UpdateService.updateFirstLastName(firstName, lastName).then(\n    (response) => {\n        dispatch({\n            type:  UPDATE_NAME_SUCCESS,\n            payload: response.message,\n        });\n        return Promise.resolve();\n    },\n    (error) => {\n        const message = (error.response\n            && error.response.data\n            && error.response.data.message)\n            || error.message || error.toString();\n        \n        dispatch({\n            type: UPDATE_NAME_FAIL,\n        });\n        dispatch({\n            type: SET_MESSAGE,\n            payload: message,\n        });\n        return Promise.reject();\n    },\n);\n\nconst updateBio = (bio) => (dispatch) => UpdateService.updateBio(bio).then(\n    (data) => {\n        dispatch({\n            type:  UPDATE_BIO_SUCCESS,\n            payload: data.message,\n        });\n        return Promise.resolve();\n    },\n    (error) => {\n        const message = (error.response\n            && error.response.data\n            && error.response.data.message)\n            || error.message || error.toString();\n        dispatch({\n            type: UPDATE_BIO_FAIL,\n        });\n        dispatch({\n            type: SET_MESSAGE,\n            payload: message,\n        });\n        return Promise.reject();\n    },\n);\n\nconst updateGender = (gender) => (dispatch) => UpdateService.updateGender(gender).then(\n    (response) => {\n        dispatch({\n            type:  UPDATE_GENDER_SUCCESS,\n            payload: response.message,\n        });\n        return Promise.resolve();\n    },\n    (error) => {\n        const message = (error.response\n            && error.response.data\n            && error.response.data.message)\n            || error.message || error.toString();\n        \n        dispatch({\n            type: UPDATE_GENDER_FAIL,\n        });\n        dispatch({\n            type: SET_MESSAGE,\n            payload: message,\n        });\n        return Promise.reject();\n    },\n);\n\nconst updatePreference = (preference) => (dispatch) => UpdateService.updatePreference(preference).then(\n    (response) => {\n        dispatch({\n            type: UPDATE_PREFERENCE_SUCCESS,\n            payload: response.message,\n        });\n        return Promise.resolve();\n    },\n    (error) => {\n        const message = (error.response\n            && error.response.data\n            && error.response.data.message)\n            || error.message || error.toString();\n        \n        dispatch({\n            type: UPDATE_PREFERENCE_FAIL,\n        });\n        dispatch({\n            type: SET_MESSAGE,\n            payload: message,\n        });\n        return Promise.reject();\n    },\n);\n\nconst updateMail = (mail) => (dispatch) => UpdateService.updateMail(mail).then(\n    (response) => {\n        dispatch({\n            type: UPDATE_MAIL_SUCCESS,\n            payload: response.message,\n        });\n        return Promise.resolve();\n    },\n    (error) => {\n        const message = (error.response\n            && error.response.data\n            && error.response.data.message)\n            || error.message || error.toString();\n        \n        dispatch({\n            type: UPDATE_MAIL_FAIL,\n        });\n        dispatch({\n            type: SET_MESSAGE,\n            payload: message,\n        });\n        return Promise.reject();\n    },\n);\n\nconst updatePassword = (oldPassword, newPassword) => (dispatch) => UpdateService.updatePassword(oldPassword, newPassword).then(\n    (response) => {\n        dispatch({\n            type: UPDATE_PASSWORD_SUCCESS,\n            payload: response.message,\n        });\n        return Promise.resolve();\n    },\n    (error) => {\n        const message = (error.response\n            && error.response.data\n            && error.response.data.message)\n            || error.message || error.toString();\n        \n        dispatch({\n            type: UPDATE_PASSWORD_FAIL,\n        });\n        dispatch({\n            type: SET_MESSAGE,\n            payload: message,\n        });\n        return Promise.reject();\n    },\n);\n\nconst updateTags = (tags) => (dispatch) => UpdateService.updateTags(tags).then(\n    (response) => {\n        dispatch({\n            type: UPDATE_TAGS_SUCCESS,\n            payload: response.message,\n        });\n        return Promise.resolve();\n    },\n    (error) => {\n        const message = (error.response\n            && error.response.data\n            && error.response.data.message)\n            || error.message || error.toString();\n        \n        dispatch({\n            type: UPDATE_TAGS_FAIL,\n        });\n        dispatch({\n            type: SET_MESSAGE,\n            payload: message,\n        });\n        return Promise.reject();\n    },\n);\n\nconst deleteUser = () => (dispatch) => {\n    UpdateService.deleteUser();\n  \n    dispatch({\n      type: UPDATE_DELETE_SUCCESS,\n    });\n  };\n\nconst updatePosition = (position) => (dispatch) => UpdateService.updatePosition(position)\n    .then(\n        response => {\n            dispatch({type: 'UPDATE_POSITION_SUCCESS'})\n            return Promise.resolve();\n        },\n        (error) => {\n    const message = (error.response\n        && error.response.data\n        && error.response.data.message)\n        || error.message || error.toString();\n    dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n    });\n    return Promise.reject();\n},\n);\n\n\n\n\n\nexport default {\n    updateTags,\n    updateFirstLastName,\n    updateBio,\n    updateGender,\n    updatePreference,\n    updateMail,\n    updatePassword,\n    deleteUser,\n    updatePosition,\n}"]},"metadata":{},"sourceType":"module"}