{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE, FORGOT_PASSWORD, FORGOT_PASSWORD_FAIL, PROFILE_CREATION_SUCCESS, GPS_SUCCESS } from './types';\nimport AuthService from '../services/auth.service';\n\nconst register = (username, firstname, lastname, email, password) => dispatch => AuthService.register(username, firstname, lastname, email, password).then(response => {\n  dispatch({\n    type: REGISTER_SUCCESS\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: response.data.message\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: REGISTER_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst login = (username, password) => dispatch => AuthService.login(username, password).then(data => {\n  dispatch({\n    type: LOGIN_SUCCESS,\n    payload: {\n      user: data\n    }\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: LOGIN_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst forgotPassword = username => dispatch => AuthService.forgotPassword(username).then(data => {\n  dispatch({\n    type: FORGOT_PASSWORD,\n    payload: {\n      user: data\n    }\n  });\n  return Promise.resolve();\n}, error => {\n  const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n  dispatch({\n    type: FORGOT_PASSWORD_FAIL\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: message\n  });\n  return Promise.reject();\n});\n\nconst logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};\n\nconst profileCreated = () => dispatch => {\n  dispatch({\n    type: PROFILE_CREATION_SUCCESS\n  });\n};\n\nconst getPosition = () => dispatch => {\n  navigator.geolocation.getCurrentPosition(async coordinates => {\n    const position = {\n      lat: coordinates.coords.latitude,\n      long: coordinates.coords.longitude\n    };\n    dispatch({\n      type: GPS_SUCCESS,\n      payload: position\n    });\n\n    try {\n      await AuthService.updatePosition(position);\n    } catch (err) {\n      dispatch({\n        type: 'TOKEN_ERROR'\n      });\n    }\n  }, async err => {\n    if (err) {\n      const position = await AuthService.getPositionByIp();\n      await AuthService.updatePosition(position);\n    }\n  });\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  forgotPassword,\n  profileCreated,\n  getPosition\n};","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/client/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","FORGOT_PASSWORD","FORGOT_PASSWORD_FAIL","PROFILE_CREATION_SUCCESS","GPS_SUCCESS","AuthService","register","username","firstname","lastname","email","password","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","forgotPassword","logout","profileCreated","getPosition","navigator","geolocation","getCurrentPosition","coordinates","position","lat","coords","latitude","long","longitude","updatePosition","err","getPositionByIp"],"mappings":"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","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n  FORGOT_PASSWORD,\n  FORGOT_PASSWORD_FAIL,\n  PROFILE_CREATION_SUCCESS, GPS_SUCCESS,\n} from './types';\n\nimport AuthService from '../services/auth.service';\n\nconst register = (username, firstname, lastname, email, password) => (dispatch) => AuthService.register(username, firstname, lastname, email, password).then(\n  (response) => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n    });\n\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message,\n    });\n\n    return Promise.resolve();\n  },\n  (error) => {\n    const message = (error.response\n                    && error.response.data\n                    && error.response.data.message)\n                || error.message\n                || error.toString();\n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message,\n    });\n\n    return Promise.reject();\n  },\n);\n\nconst login = (username, password) => (dispatch) => AuthService.login(username, password).then(\n  (data) => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: { user: data },\n    });\n    return Promise.resolve();\n  },\n  (error) => {\n    const message = (error.response\n                && error.response.data\n                && error.response.data.message)\n                || error.message || error.toString();\n\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message,\n    });\n    return Promise.reject();\n  },\n);\n\nconst forgotPassword = (username) => (dispatch) => AuthService.forgotPassword(username).then(\n  (data) => {\n    dispatch({\n      type: FORGOT_PASSWORD,\n      payload: { user: data },\n    });\n    return Promise.resolve();\n  },\n  (error) => {\n    const message = (error.response\n          && error.response.data\n          && error.response.data.message)\n          || error.message || error.toString();\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message,\n    });\n    return Promise.reject();\n  },\n);\n\nconst logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n\nconst profileCreated = () => (dispatch) => {\n  dispatch({type: PROFILE_CREATION_SUCCESS })\n}\n\n\n\nconst getPosition = () => (dispatch) => {\n      navigator.geolocation.getCurrentPosition(async (coordinates) => {\n        const position = {lat: coordinates.coords.latitude, long: coordinates.coords.longitude}\n          dispatch({type: GPS_SUCCESS, payload: position})\n        try {\n          await AuthService.updatePosition(position);\n        } catch (err) {\n          dispatch({type: 'TOKEN_ERROR'})\n        }\n      }, async (err) => {\n          if (err) {\n            const position = await AuthService.getPositionByIp();\n            await AuthService.updatePosition(position);\n          }\n      }\n      );\n}\n\nexport default {\n  register,\n  login,\n  logout,\n  forgotPassword,\n  profileCreated,\n  getPosition\n};\n"]},"metadata":{},"sourceType":"module"}