{"ast":null,"code":"var _jsxFileName = \"/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/components/ProfileRandom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../context/UserContext\";\nimport jwt_decode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileRandom = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    selectedUser,\n    setSelectedUser\n  } = useContext(UserContext);\n  const [token, setToken] = useState(\"\");\n  const [expire, setExpire] = useState(\"\");\n  const history = useHistory();\n  useEffect(() => {\n    refreshToken();\n\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/users/${id}`);\n        setSelectedUser(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const refreshToken = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/token\");\n      setToken(response.data.accessToken);\n      const decoded = jwt_decode(response.data.accessToken);\n      setExpire(decoded.exp);\n    } catch (error) {\n      if (error.response) {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  const axiosJWT = axios.create();\n  axiosJWT.interceptors.request.use(async config => {\n    const currentDate = new Date();\n\n    if (expire * 1000 < currentDate.getTime()) {\n      const response = await axios.get(\"http://localhost:5000/token\");\n      config.headers.Authorization = `Bearer ${response.data.accessToken}`;\n      setToken(response.data.accessToken);\n      const decoded = jwt_decode(response.data.accessToken);\n      setExpire(decoded.exp);\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  if (!selectedUser) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: selectedUser.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedUser.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedUser.birthdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(ProfileRandom, \"7+Tcsb/9SSu/OFQaUk93WEKXbnc=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = ProfileRandom;\nexport default ProfileRandom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileRandom\");","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/components/ProfileRandom.js"],"names":["React","useContext","useEffect","useParams","useHistory","UserContext","jwt_decode","axios","ProfileRandom","id","selectedUser","setSelectedUser","token","setToken","useState","expire","setExpire","history","refreshToken","fetchData","response","get","data","error","console","log","accessToken","decoded","exp","push","axiosJWT","create","interceptors","request","use","config","currentDate","Date","getTime","headers","Authorization","Promise","reject","username","email","birthdate"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { useParams, useHistory} from \"react-router-dom\"; \nimport { UserContext } from \"../context/UserContext\";\nimport jwt_decode from \"jwt-decode\";\nimport axios from \"axios\";\n\nconst ProfileRandom = () => {\n  const { id } = useParams();\n  const { selectedUser, setSelectedUser } = useContext(UserContext);\n  const [token, setToken] = useState(\"\");\n  const [expire, setExpire] = useState(\"\");\n  const history = useHistory();\n\n\n\n  useEffect(() => {\n    refreshToken();\n\n    const fetchData = async () => {\n        try{\n            const response = await axios.get(`http://localhost:5000/users/${id}`);\n            setSelectedUser(response.data);\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    fetchData();\n  }, []);\n\n\n  const refreshToken = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/token\");\n      setToken(response.data.accessToken);\n      const decoded = jwt_decode(response.data.accessToken);\n      setExpire(decoded.exp);\n    } catch (error) {\n      if (error.response) {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  const axiosJWT = axios.create();\n\n  axiosJWT.interceptors.request.use(\n    async (config) => {\n      const currentDate = new Date();\n      if (expire * 1000 < currentDate.getTime()) {\n        const response = await axios.get(\"http://localhost:5000/token\");\n        config.headers.Authorization = `Bearer ${response.data.accessToken}`;\n        setToken(response.data.accessToken);\n        const decoded = jwt_decode(response.data.accessToken);\n        setExpire(decoded.exp);\n      }\n      return config;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n  if (!selectedUser) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div>\n        <h1>{selectedUser.username}</h1>\n        <h2>{selectedUser.email}</h2>\n        <h2>{selectedUser.birthdate}</h2>\n      </div>\n    );\n  }\n};\n\nexport default ProfileRandom;"]},"metadata":{},"sourceType":"module"}