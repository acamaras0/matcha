{"ast":null,"code":"var _s = $RefreshSig$();\n\n// /* eslint-disable */\nimport { useEffect, useState } from \"react\";\nimport { getDistance } from \"geolib\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport useGeoLocation from \"./useGeoLocation\";\n\nconst useGetDistance = () => {\n  _s();\n\n  const location = useGeoLocation();\n  const [matchLocation, setMatchLocation] = useState([]);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n  useEffect(() => {\n    const getCoordinates = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/users/info/${cookie.refreshToken}`);\n        setMatchLocation(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    getCoordinates();\n  }, [cookie.refreshToken]);\n\n  if (!location.error) {\n    if (location.coordinates.lat && location.coordinates.lng) {\n      for (let i = 0; i < matchLocation.length; i++) {\n        const distance = getDistance({\n          latitude: location.coordinates.lat,\n          longitude: location.coordinates.lng\n        }, {\n          latitude: matchLocation[i].geo_lat,\n          longitude: matchLocation[i].geo_long\n        });\n        matchLocation[i].distance = distance;\n      }\n    }\n  }\n\n  return matchLocation;\n};\n\n_s(useGetDistance, \"UQILMVfP45gmSAO27GSKyHjGa/0=\", false, function () {\n  return [useGeoLocation, useCookies];\n});\n\nexport default useGetDistance;","map":{"version":3,"sources":["/opt/lampstack-8.1.7-0/apache2/htdocs/matcha-2.0/front/src/utils/useGetDistance.js"],"names":["useEffect","useState","getDistance","useCookies","axios","useGeoLocation","useGetDistance","location","matchLocation","setMatchLocation","cookie","setCookie","getCoordinates","response","get","refreshToken","data","error","console","log","coordinates","lat","lng","i","length","distance","latitude","longitude","geo_lat","geo_long"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,QAAQ,GAAGF,cAAc,EAA/B;AACA,QAAM,CAACG,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBR,UAAU,CAAC,CAAC,cAAD,CAAD,CAAtC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,cAAc,GAAG,YAAY;AACjC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CACpB,oCAAmCJ,MAAM,CAACK,YAAa,EADnC,CAAvB;AAGAN,QAAAA,gBAAgB,CAACI,QAAQ,CAACG,IAAV,CAAhB;AACD,OALD,CAKE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KATD;;AAUAL,IAAAA,cAAc;AACf,GAZQ,EAYN,CAACF,MAAM,CAACK,YAAR,CAZM,CAAT;;AAcA,MAAI,CAACR,QAAQ,CAACU,KAAd,EAAsB;AACpB,QAAIV,QAAQ,CAACa,WAAT,CAAqBC,GAArB,IAA4Bd,QAAQ,CAACa,WAAT,CAAqBE,GAArD,EAA0D;AACxD,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,aAAa,CAACgB,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,cAAME,QAAQ,GAAGvB,WAAW,CAC1B;AACEwB,UAAAA,QAAQ,EAAEnB,QAAQ,CAACa,WAAT,CAAqBC,GADjC;AAEEM,UAAAA,SAAS,EAAEpB,QAAQ,CAACa,WAAT,CAAqBE;AAFlC,SAD0B,EAK1B;AACEI,UAAAA,QAAQ,EAAElB,aAAa,CAACe,CAAD,CAAb,CAAiBK,OAD7B;AAEED,UAAAA,SAAS,EAAEnB,aAAa,CAACe,CAAD,CAAb,CAAiBM;AAF9B,SAL0B,CAA5B;AAUArB,QAAAA,aAAa,CAACe,CAAD,CAAb,CAAiBE,QAAjB,GAA4BA,QAA5B;AACD;AACF;AACF;;AACD,SAAOjB,aAAP;AACD,CArCD;;GAAMF,c;UACaD,c,EAEWF,U;;;AAoC9B,eAAeG,cAAf","sourcesContent":["// /* eslint-disable */\nimport { useEffect, useState } from \"react\";\nimport { getDistance } from \"geolib\";\nimport { useCookies } from \"react-cookie\";\nimport axios from \"axios\";\nimport useGeoLocation from \"./useGeoLocation\";\n\nconst useGetDistance = () => {\n  const location = useGeoLocation();\n  const [matchLocation, setMatchLocation] = useState([]);\n  const [cookie, setCookie] = useCookies([\"refreshToken\"]);\n\n  useEffect(() => {\n    const getCoordinates = async () => {\n      try {\n        const response = await axios.get(\n          `http://localhost:5000/users/info/${cookie.refreshToken}`\n        );\n        setMatchLocation(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getCoordinates();\n  }, [cookie.refreshToken]);\n\n  if (!location.error ) {\n    if (location.coordinates.lat && location.coordinates.lng) {\n      for (let i = 0; i < matchLocation.length; i++) {\n        const distance = getDistance(\n          {\n            latitude: location.coordinates.lat,\n            longitude: location.coordinates.lng,\n          },\n          {\n            latitude: matchLocation[i].geo_lat,\n            longitude: matchLocation[i].geo_long,\n          }\n        );\n        matchLocation[i].distance = distance;\n      }\n    }\n  }\n  return matchLocation;\n};\n\nexport default useGetDistance;\n"]},"metadata":{},"sourceType":"module"}